const {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLList,
  GraphQLNonNull,
  GraphQLID,
} = require('graphql');

// Picture Type
const PictureType = new GraphQLObjectType({
  name: 'Picture',
  fields: {
    id: { type: GraphQLNonNull(GraphQLID) },
    url: { type: GraphQLNonNull(GraphQLString) },
    description: { type: GraphQLString },
  },
});

// Post Type
const PostType = new GraphQLObjectType({
  name: 'Post',
  fields: {
    id: { type: GraphQLNonNull(GraphQLID) },
    title: { type: GraphQLNonNull(GraphQLString) },
    content: { type: GraphQLString },
    pictures: { type: GraphQLList(PictureType) },
  },
});

// Role Type
const RoleType = new GraphQLObjectType({
  name: 'Role',
  fields: {
    id: { type: GraphQLNonNull(GraphQLID) },
    name: { type: GraphQLNonNull(GraphQLString) },
  },
});

// User Type
const UserType = new GraphQLObjectType({
  name: 'User',
  fields: {
    id: { type: GraphQLNonNull(GraphQLID) },
    name: { type: GraphQLNonNull(GraphQLString) },
    email: { type: GraphQLNonNull(GraphQLString) },
    posts: { type: GraphQLList(PostType) },
    role: { type: RoleType },
  },
});

// Sample Data
const users = [];
const roles = [];
const posts = [];
const pictures = [];

// Query Type
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    users: {
      type: GraphQLList(UserType),
      resolve: () => users,
    },
    user: {
      type: UserType,
      args: { id: { type: GraphQLNonNull(GraphQLID) } },
      resolve: (_, { id }) => users.find((user) => user.id === id),
    },
    roles: {
      type: GraphQLList(RoleType),
      resolve: () => roles,
    },
    posts: {
      type: GraphQLList(PostType),
      resolve: () => posts,
    },
    post: {
      type: PostType,
      args: { id: { type: GraphQLNonNull(GraphQLID) } },
      resolve: (_, { id }) => posts.find((post) => post.id === id),
    },
    pictures: {
      type: GraphQLList(PictureType),
      resolve: () => pictures,
    },
  },
});

// Mutation Type
const MutationType = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    createUser: {
      type: UserType,
      args: {
        name: { type: GraphQLNonNull(GraphQLString) },
        email: { type: GraphQLNonNull(GraphQLString) },
        roleId: { type: GraphQLNonNull(GraphQLID) },
      },
      resolve: (_, { name, email, roleId }) => {
        const role = roles.find((role) => role.id === roleId);
        if (!role) throw new Error('Role not found');
        const user = { id: `${users.length + 1}`, name, email, role, posts: [] };
        users.push(user);
        return user;
      },
    },
    createPost: {
      type: PostType,
      args: {
        userId: { type: GraphQLNonNull(GraphQLID) },
        title: { type: GraphQLNonNull(GraphQLString) },
        content: { type: GraphQLString },
      },
      resolve: (_, { userId, title, content }) => {
        const user = users.find((user) => user.id === userId);
        if (!user) throw new Error('User not found');
        const post = { id: `${posts.length + 1}`, title, content, pictures: [] };
        user.posts.push(post);
        posts.push(post);
        return post;
      },
    },
    addPictureToPost: {
      type: PictureType,
      args: {
        postId: { type: GraphQLNonNull(GraphQLID) },
        url: { type: GraphQLNonNull(GraphQLString) },
        description: { type: GraphQLString },
      },
      resolve: (_, { postId, url, description }) => {
        const post = posts.find((post) => post.id === postId);
        if (!post) throw new Error('Post not found');
        const picture = { id: `${pictures.length + 1}`, url, description };
        post.pictures.push(picture);
        pictures.push(picture);
        return picture;
      },
    },
    updateUser: {
      type: UserType,
      args: {
        id: { type: GraphQLNonNull(GraphQLID) },
        name: { type: GraphQLString },
        email: { type: GraphQLString },
      },
      resolve: (_, { id, name, email }) => {
        const user = users.find((user) => user.id === id);
        if (!user) throw new Error('User not found');
        if (name) user.name = name;
        if (email) user.email = email;
        return user;
      },
    },
    deletePost: {
      type: PostType,
      args: {
        id: { type: GraphQLNonNull(GraphQLID) },
      },
      resolve: (_, { id }) => {
        const postIndex = posts.findIndex((post) => post.id === id);
        if (postIndex === -1) throw new Error('Post not found');
        const [deletedPost] = posts.splice(postIndex, 1);
        users.forEach((user) => {
          user.posts = user.posts.filter((post) => post.id !== id);
        });
        return deletedPost;
      },
    },
  },
});

// Schema
const schema = new GraphQLSchema({
  query: QueryType,
  mutation: MutationType,
});

module.exports = schema;
